/**
 * Fast Fourier Transform - Optimized implementation for arrays of size 1024.
 * 
 * This class provides a highly optimized FFT implementation specifically designed
 * for 1024-element arrays using hardcoded bit-reversal lookup tables.
 * 
 * @author Orlando Selenu (original base algorithm, 2008)
 * @author Engine AI Assistant (optimized implementation, 2025)
 * @since 1.0
 */
public class FFToptim1024 {

    // Precomputed trigonometric lookup tables for 1024-point FFT
    private static final double[] COS_TABLE = new double[512];
    private static final double[] SIN_TABLE = new double[512];

    // Hardcoded bit-reversal swap pairs for optimal performance
    private static final int[][] BIT_REVERSAL_PAIRS = {
        {1, 512},
        {2, 256},
        {3, 768},
        {4, 128},
        {5, 640},
        {6, 384},
        {7, 896},
        {8, 64},
        {9, 576},
        {10, 320},
        {11, 832},
        {12, 192},
        {13, 704},
        {14, 448},
        {15, 960},
        {16, 32},
        {17, 544},
        {18, 288},
        {19, 800},
        {20, 160},
        {21, 672},
        {22, 416},
        {23, 928},
        {24, 96},
        {25, 608},
        {26, 352},
        {27, 864},
        {28, 224},
        {29, 736},
        {30, 480},
        {31, 992},
        {33, 528},
        {34, 272},
        {35, 784},
        {36, 144},
        {37, 656},
        {38, 400},
        {39, 912},
        {40, 80},
        {41, 592},
        {42, 336},
        {43, 848},
        {44, 208},
        {45, 720},
        {46, 464},
        {47, 976},
        {49, 560},
        {50, 304},
        {51, 816},
        {52, 176},
        {53, 688},
        {54, 432},
        {55, 944},
        {56, 112},
        {57, 624},
        {58, 368},
        {59, 880},
        {60, 240},
        {61, 752},
        {62, 496},
        {63, 1008},
        {65, 520},
        {66, 264},
        {67, 776},
        {68, 136},
        {69, 648},
        {70, 392},
        {71, 904},
        {73, 584},
        {74, 328},
        {75, 840},
        {76, 200},
        {77, 712},
        {78, 456},
        {79, 968},
        {81, 552},
        {82, 296},
        {83, 808},
        {84, 168},
        {85, 680},
        {86, 424},
        {87, 936},
        {88, 104},
        {89, 616},
        {90, 360},
        {91, 872},
        {92, 232},
        {93, 744},
        {94, 488},
        {95, 1000},
        {97, 536},
        {98, 280},
        {99, 792},
        {100, 152},
        {101, 664},
        {102, 408},
        {103, 920},
        {105, 600},
        {106, 344},
        {107, 856},
        {108, 216},
        {109, 728},
        {110, 472},
        {111, 984},
        {113, 568},
        {114, 312},
        {115, 824},
        {116, 184},
        {117, 696},
        {118, 440},
        {119, 952},
        {121, 632},
        {122, 376},
        {123, 888},
        {124, 248},
        {125, 760},
        {126, 504},
        {127, 1016},
        {129, 516},
        {130, 260},
        {131, 772},
        {133, 644},
        {134, 388},
        {135, 900},
        {137, 580},
        {138, 324},
        {139, 836},
        {140, 196},
        {141, 708},
        {142, 452},
        {143, 964},
        {145, 548},
        {146, 292},
        {147, 804},
        {148, 164},
        {149, 676},
        {150, 420},
        {151, 932},
        {153, 612},
        {154, 356},
        {155, 868},
        {156, 228},
        {157, 740},
        {158, 484},
        {159, 996},
        {161, 532},
        {162, 276},
        {163, 788},
        {165, 660},
        {166, 404},
        {167, 916},
        {169, 596},
        {170, 340},
        {171, 852},
        {172, 212},
        {173, 724},
        {174, 468},
        {175, 980},
        {177, 564},
        {178, 308},
        {179, 820},
        {181, 692},
        {182, 436},
        {183, 948},
        {185, 628},
        {186, 372},
        {187, 884},
        {188, 244},
        {189, 756},
        {190, 500},
        {191, 1012},
        {193, 524},
        {194, 268},
        {195, 780},
        {197, 652},
        {198, 396},
        {199, 908},
        {201, 588},
        {202, 332},
        {203, 844},
        {205, 716},
        {206, 460},
        {207, 972},
        {209, 556},
        {210, 300},
        {211, 812},
        {213, 684},
        {214, 428},
        {215, 940},
        {217, 620},
        {218, 364},
        {219, 876},
        {220, 236},
        {221, 748},
        {222, 492},
        {223, 1004},
        {225, 540},
        {226, 284},
        {227, 796},
        {229, 668},
        {230, 412},
        {231, 924},
        {233, 604},
        {234, 348},
        {235, 860},
        {237, 732},
        {238, 476},
        {239, 988},
        {241, 572},
        {242, 316},
        {243, 828},
        {245, 700},
        {246, 444},
        {247, 956},
        {249, 636},
        {250, 380},
        {251, 892},
        {253, 764},
        {254, 508},
        {255, 1020},
        {257, 514},
        {259, 770},
        {261, 642},
        {262, 386},
        {263, 898},
        {265, 578},
        {266, 322},
        {267, 834},
        {269, 706},
        {270, 450},
        {271, 962},
        {273, 546},
        {274, 290},
        {275, 802},
        {277, 674},
        {278, 418},
        {279, 930},
        {281, 610},
        {282, 354},
        {283, 866},
        {285, 738},
        {286, 482},
        {287, 994},
        {289, 530},
        {291, 786},
        {293, 658},
        {294, 402},
        {295, 914},
        {297, 594},
        {298, 338},
        {299, 850},
        {301, 722},
        {302, 466},
        {303, 978},
        {305, 562},
        {307, 818},
        {309, 690},
        {310, 434},
        {311, 946},
        {313, 626},
        {314, 370},
        {315, 882},
        {317, 754},
        {318, 498},
        {319, 1010},
        {321, 522},
        {323, 778},
        {325, 650},
        {326, 394},
        {327, 906},
        {329, 586},
        {331, 842},
        {333, 714},
        {334, 458},
        {335, 970},
        {337, 554},
        {339, 810},
        {341, 682},
        {342, 426},
        {343, 938},
        {345, 618},
        {346, 362},
        {347, 874},
        {349, 746},
        {350, 490},
        {351, 1002},
        {353, 538},
        {355, 794},
        {357, 666},
        {358, 410},
        {359, 922},
        {361, 602},
        {363, 858},
        {365, 730},
        {366, 474},
        {367, 986},
        {369, 570},
        {371, 826},
        {373, 698},
        {374, 442},
        {375, 954},
        {377, 634},
        {379, 890},
        {381, 762},
        {382, 506},
        {383, 1018},
        {385, 518},
        {387, 774},
        {389, 646},
        {391, 902},
        {393, 582},
        {395, 838},
        {397, 710},
        {398, 454},
        {399, 966},
        {401, 550},
        {403, 806},
        {405, 678},
        {406, 422},
        {407, 934},
        {409, 614},
        {411, 870},
        {413, 742},
        {414, 486},
        {415, 998},
        {417, 534},
        {419, 790},
        {421, 662},
        {423, 918},
        {425, 598},
        {427, 854},
        {429, 726},
        {430, 470},
        {431, 982},
        {433, 566},
        {435, 822},
        {437, 694},
        {439, 950},
        {441, 630},
        {443, 886},
        {445, 758},
        {446, 502},
        {447, 1014},
        {449, 526},
        {451, 782},
        {453, 654},
        {455, 910},
        {457, 590},
        {459, 846},
        {461, 718},
        {463, 974},
        {465, 558},
        {467, 814},
        {469, 686},
        {471, 942},
        {473, 622},
        {475, 878},
        {477, 750},
        {478, 494},
        {479, 1006},
        {481, 542},
        {483, 798},
        {485, 670},
        {487, 926},
        {489, 606},
        {491, 862},
        {493, 734},
        {495, 990},
        {497, 574},
        {499, 830},
        {501, 702},
        {503, 958},
        {505, 638},
        {507, 894},
        {509, 766},
        {511, 1022},
        {515, 769},
        {517, 641},
        {519, 897},
        {521, 577},
        {523, 833},
        {525, 705},
        {527, 961},
        {529, 545},
        {531, 801},
        {533, 673},
        {535, 929},
        {537, 609},
        {539, 865},
        {541, 737},
        {543, 993},
        {547, 785},
        {549, 657},
        {551, 913},
        {553, 593},
        {555, 849},
        {557, 721},
        {559, 977},
        {563, 817},
        {565, 689},
        {567, 945},
        {569, 625},
        {571, 881},
        {573, 753},
        {575, 1009},
        {579, 777},
        {581, 649},
        {583, 905},
        {587, 841},
        {589, 713},
        {591, 969},
        {595, 809},
        {597, 681},
        {599, 937},
        {601, 617},
        {603, 873},
        {605, 745},
        {607, 1001},
        {611, 793},
        {613, 665},
        {615, 921},
        {619, 857},
        {621, 729},
        {623, 985},
        {627, 825},
        {629, 697},
        {631, 953},
        {635, 889},
        {637, 761},
        {639, 1017},
        {643, 773},
        {647, 901},
        {651, 837},
        {653, 709},
        {655, 965},
        {659, 805},
        {661, 677},
        {663, 933},
        {667, 869},
        {669, 741},
        {671, 997},
        {675, 789},
        {679, 917},
        {683, 853},
        {685, 725},
        {687, 981},
        {691, 821},
        {695, 949},
        {699, 885},
        {701, 757},
        {703, 1013},
        {707, 781},
        {711, 909},
        {715, 845},
        {719, 973},
        {723, 813},
        {727, 941},
        {731, 877},
        {733, 749},
        {735, 1005},
        {739, 797},
        {743, 925},
        {747, 861},
        {751, 989},
        {755, 829},
        {759, 957},
        {763, 893},
        {767, 1021},
        {775, 899},
        {779, 835},
        {783, 963},
        {787, 803},
        {791, 931},
        {795, 867},
        {799, 995},
        {807, 915},
        {811, 851},
        {815, 979},
        {823, 947},
        {827, 883},
        {831, 1011},
        {839, 907},
        {847, 971},
        {855, 939},
        {859, 875},
        {863, 1003},
        {871, 923},
        {879, 987},
        {887, 955},
        {895, 1019},
        {911, 967},
        {919, 935},
        {927, 999},
        {943, 983},
        {959, 1015},
        {991, 1007}
    };

    static {
        // Initialize trigonometric lookup tables
        for (int i = 0; i < 512; i++) {
            double angle = 2.0 * Math.PI * i / 1024.0;
            COS_TABLE[i] = Math.cos(angle);
            SIN_TABLE[i] = Math.sin(angle);
        }
    }

    /**
     * Performs Fast Fourier Transform optimized for 1024-element arrays.
     * 
     * @param inputReal array of exactly 1024 real values
     * @param inputImag array of exactly 1024 imaginary values
     * @param DIRECT true for forward transform, false for inverse
     * @return array of length 2048 with interleaved real and imaginary results
     */
    public static double[] fft(final double[] inputReal, double[] inputImag, boolean DIRECT) {
        // Validate input size
        if (inputReal.length != 1024 || inputImag.length != 1024) {
            System.out.println("ERROR: Input arrays must be exactly size 1024");
            return new double[0];
        }

        // Hardcoded parameters for size 1024
        final int n = 1024;
        final int nu = 10;
        int n2 = 512;
        int nu1 = 9;
        double[] xReal = new double[n];
        double[] xImag = new double[n];
        double tReal, tImag;

        // Copy input arrays
        System.arraycopy(inputReal, 0, xReal, 0, n);
        System.arraycopy(inputImag, 0, xImag, 0, n);

        // FFT butterfly computation stages
        int k = 0;
        for (int l = 1; l <= nu; l++) {
            while (k < n) {
                for (int i = 1; i <= n2; i++) {
                    int p_index = k >> nu1;
                    double c, s;
                    if (p_index < 512) {
                        c = DIRECT ? COS_TABLE[p_index] : COS_TABLE[p_index];
                        s = DIRECT ? -SIN_TABLE[p_index] : SIN_TABLE[p_index];
                    } else {
                        c = 1.0; s = 0.0;
                    }
                    tReal = xReal[k + n2] * c + xImag[k + n2] * s;
                    tImag = xImag[k + n2] * c - xReal[k + n2] * s;
                    xReal[k + n2] = xReal[k] - tReal;
                    xImag[k + n2] = xImag[k] - tImag;
                    xReal[k] += tReal;
                    xImag[k] += tImag;
                    k++;
                }
                k += n2;
            }
            k = 0; nu1--; n2 /= 2;
        }

        // Final bit-reversal reordering using hardcoded lookup table
        for (int[] pair : BIT_REVERSAL_PAIRS) {
            int i = pair[0], j = pair[1];
            tReal = xReal[i]; tImag = xImag[i];
            xReal[i] = xReal[j]; xImag[i] = xImag[j];
            xReal[j] = tReal; xImag[j] = tImag;
        }

        // Generate interleaved output with normalization
        double[] result = new double[2048];
        double radice = 1.0 / Math.sqrt(n);
        for (int i = 0; i < n; i++) {
            result[2 * i] = xReal[i] * radice;
            result[2 * i + 1] = xImag[i] * radice;
        }
        return result;
    }
}
